execute pathogen#infect()
execute pathogen#helptags()
syntax on 
nnoremap <silent> <F9> :TlistToggle<CR>
map <C-n> :NERDTreeToggle<CR>
set backspace=indent,eol,start " enable backspace in all situtations
filetype plugin indent on " enable automatic indentation
set number " enable number lines
colorscheme base16-tomorrow " theme
set background=dark " background fix
let g:pydoc_use_drop=1
set softtabstop=4 shiftwidth=4 expandtab " use softtabs, length of 4 columns (should probably do this per-language)
set cc=81 " color the 81st column
set backupdir=~/.vim/swap/ " centralize backups
set directory=~/.vim/swap/
set nocompatible " don't need vi compatibility
set laststatus=2 " always show status line
set encoding=utf-8 " utf-8 is good
let mapleader = ","
au BufWritePost .vimrc so ~/.vimrc " Automatically reload vimrc when it's saved

" indent block of code in visual mode
vnoremap <s-tab> <gv
vnoremap <tab> >gv
""set wildmenu
""set wildmode=list:longest

"py import ropevim

" remap buffer nagivation to ctrl+up/down/left/right
map <c-Down>    <c-W><Down>
map <c-Up>      <c-W><Up>
map <c-Left>    <c-W><Left>
map <c-Right>   <c-W><Right>

" NERDTree options
let NERDTreeDirArrows = 0 " old school

" supertab options
let g:SuperTabLongestHighlight = 1 " preselect first match
let g:SuperTabDefaultCompletionType = "context"

" python-mode options
let g:pymode_lint_onfly = 0
let g:pymode_folding = 0
let g:pymode_rope = 0 " this will force the standard ropevim to load

" taglist options
let Tlist_Exit_OnlyWindow = 1
let Tlist_WinWidth = 50
let Tlist_Use_Right_Window = 1
let Tlist_Display_Prototype = 0
highlight link MyTagListFileName String

" fix for taglist on OSX, use brew version of ctags over system version
if has("mac") && findfile("/usr/local/bin/ctags") != ""
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
    let g:neocomplcache_ctags_program = "/usr/local/bin/ctags"
endif

" neocomplcache settings

" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3
" buffer file name pattern that locks neocomplcache. e.g. ku.vim or fuzzyfinder 
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" widen popup
let g:neocomplcache_max_keyword_width = 60
" Define file-type dependent dictionaries.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword, for minor languages
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

