execute pathogen#infect()
execute pathogen#helptags()

" enable syntax highlight
syntax on 
" don't need vi compatibility
set nocompatible 
" enable backspace in all situtations
set backspace=indent,eol,start
" enable filetype-specific plugins and indentation
filetype plugin indent on
" enable number line
set number
" highlight cursor line
set cursorline
" use spaces for tabs, length of 4 columns (should probably do this per-language)
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab 
" color the 81st column
set cc=81 
" centralize backups
set backupdir=~/.vim/swap/ 
set directory=~/.vim/swap/
" always show status line (required by powerline)
set laststatus=2 
" also required by powerline
set encoding=utf-8
" Folding should be set manually, never automatically.
set foldmethod=manual
" Do not fold anything by default.
set foldlevel=999
" Allow modified/unsaved buffers in the background.
set hidden
" Highlight search results.
set hlsearch
" Searches are case-sensitive.
set ignorecase
" If run in a terminal, set the terminal title.
set title
" align function params
set cino=(0

let mapleader = ","
set background=dark
colorscheme mine

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS                                  
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" indent block of code in visual mode
vnoremap <s-tab> <gv
vnoremap <tab> >gv

" toggle taglist
map <C-t> :TlistToggle<CR>
" toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" remap buffer nagivation to ctrl+up/down/left/right
map <c-Down>    <c-W><Down>
map <c-Up>      <c-W><Up>
map <c-Left>    <c-W><Left>
map <c-Right>   <c-W><Right>

" neocomplcache mappings
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" toggle hex highlighting
nmap <Leader>hh <Plug>HexHighlightToggle

" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" auto align equals signs with Tabularize
"inoremap <silent> = =<Esc>:call <SID>ealign()<CR>a

" binding for autoformat plugin
nmap <Leader>af :Autoformat<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NERDTree options
let NERDTreeDirArrows = 0 " old school

" supertab options
let g:SuperTabLongestHighlight = 1 " preselect first match
let g:SuperTabDefaultCompletionType = "context"

" python-mode options
let g:pymode_lint_onfly = 0
let g:pymode_folding = 0
let g:pymode_rope = 0 " this will force the standard ropevim to load

" taglist options
let Tlist_Exit_OnlyWindow = 1
let Tlist_WinWidth = 50
let Tlist_Use_Right_Window = 1
let Tlist_Display_Prototype = 0
highlight link MyTagListFileName String

" fix for taglist on OSX, use brew version of ctags over system version
if has("mac") && findfile("/usr/local/bin/ctags") != ""
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
    let g:neocomplcache_ctags_program = "/usr/local/bin/ctags"
endif

" neocomplcache settings

" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3
" buffer file name pattern that locks neocomplcache. e.g. ku.vim or fuzzyfinder 
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" widen popup
let g:neocomplcache_max_keyword_width = 60
" Define file-type dependent dictionaries.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
" restrict omnicompletion triggering pattern, eclim completion is slow
let g:neocomplcache_omni_patterns.java = '\.\w*'

" use neocomplcache & clang_complete
" add neocomplcache option
let g:neocomplcache_force_overwrite_completefunc=1
" add clang_complete option
let g:clang_complete_auto=0

" Tabularize settings

" auto align equals signs
function! s:ealign()
  let p = '^.*=\s.*$'
  if exists(':Tabularize') && getline('.') =~# '^.*=' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^=]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*=\s*\zs.*'))
    Tabularize/=/l1
    normal! 0
    call search(repeat('[^=]*=',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction


" vim-autoformat settings

" don't let the plugin overwrite your tab settings
let g:autoformat_no_default_shiftwidth=1

let g:formatprg_c      = "uncrustify"
let g:formatprg_args_c = "-c ~/.vim/uncrustify_c.cfg -l C -q"
let g:formatprg_cpp      = "uncrustify"
let g:formatprg_args_cpp = "-c ~/.vim/uncrustify_c.cfg -l C -q"

let g:formatprg_java      = "astyle"
let g:formatprg_args_java = "--mode=java --style=kr -p -H"
" brew only
if has("mac") && findfile("/usr/local/lib/python2.7/site-packages/autopep8.py") != ""
    let g:formatprg_python = "/usr/local/lib/python2.7/site-packages/autopep8.py"
endif
let g:formatprg_args_python = "-"

" syntastic settings
let g:syntastic_c_checker = "gcc-4.8"
let g:syntastic_c_compiler_options = '-std=c11'
let g:syntastic_auto_loc_list = 1
let g:syntastic_c_check_header = 1
